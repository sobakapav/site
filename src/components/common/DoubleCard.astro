---
import Image from '~/components/common/Image.astro';
import { Markdown } from '@astropub/md';

const {
  image, 
  imageLarge,
  alt, 
  link, 
  supertitle = await Astro.slots.render('supertitle'),
  title, 
  text,
  textblock = await Astro.slots.render('textblock'),  
  footer = await Astro.slots.render('footer'),
  isDark, 
  classes = {
    main: 'blog-list-item',
    title: '',
    text: ''
  }
} = Astro.props;

---
<a href={link}>
<article class:list={['flex flex-wrap mb-6 relative', classes.main]}>
  {
    imageLarge && (
      <a href={link ?? 'javascript:void(0)'}>
        <div class="relative overflow-hidden rounded image-animate">
          <div class="w-[608px]">
            {imageLarge && (
              <Image
                src={imageLarge}
                class="rounded"
                layout="constrained"
                width={608}
                alt={alt ?? title}
                loading="lazy"
                decoding="async"
              />
            )}
          </div>
          <div class="mt-4 absolute left-8 bottom-5">
            <header class="w-[280px]">
              {supertitle && (
                <div class="mb-1 hover:text-[--aw-color-accent]">
                  <span class="text-sm" set:html={supertitle} />
                </div>
              )}
                   
              <h2 class:list={["text-xl sm:text-3xl leading-tight mb-1 dark:text-slate-300 font-heading", classes.title]}>
                {isDark ? (
                  <a href={link} class="text-white hover:text-white">
                    <Markdown.Inline of={title} />
                  </a>
                ) : (
                  <a href={link} class="text-[--aw-color-always-dark]">
                    <Markdown.Inline of={title} />
                  </a>
                )}
              </h2>
            </header>
        
            {
              isDark ? (
                <a href={link} class="w-[280px]">
                  {text && (
                    <p class:list={["flex-grow format-subtitle-markdown text-white w-[280px]", classes.text]}>
                      <Markdown.Inline of={text} />
                    </p>
                  )}
                  
                  {textblock && (
                    <div set:html={textblock} class="text-white w-[280px]" />
                  )}
                </a>
              ) : (
                <a href={link} class="w-[280px]">
                  {text && (
                    <p class:list={["flex-grow format-subtitle-markdown text-[--aw-color-always-dark] w-[280px]", classes.text]}>
                      <Markdown.Inline of={text} />
                    </p>
                  )}
                  
                  {textblock && (
                    <div set:html={textblock} class="w-[280px]"/>
                  )}
                </a>
              )
            }
            { footer && (
              <div class="flex flex-row mt-4 gap-4" set:html={footer} />
            )}
          </div>          
        </div>
      </a>
    )
  }
  
</article>
</a>
