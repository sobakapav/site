---
import Image from '~/components/common/Image.astro';
import { Markdown } from '@astropub/md';

const {
  image, 
  imageSafari,
  alt, 
  link, 
  supertitle = await Astro.slots.render('supertitle'),
  title, 
  text,
  textblock = await Astro.slots.render('textblock'),  
  footer = await Astro.slots.render('footer'),
  noCard = false,
  classes = {
    main: 'blog-list-item',
    title: '',
    text: ''
  }
} = Astro.props;

---
<a href={link}>
<article class:list={['flex flex-wrap mb-6', classes.main]}>
  {
    image && (
      <a href={link ?? 'javascript:void(0)'}>
        <div class="relative overflow-hidden rounded image-animate">
          <div class="w-72 h-72">
            {image && (imageSafari ? (
              <Fragment>
                <Image
                  src={image}
                  class="rounded no-safari"
                  layout={noCard ? "constrained-width" : "constrained-both"}
                  width={288}
                  alt={alt ?? title}
                  loading="lazy"
                  decoding="async"
                />
                <Image
                  src={imageSafari}
                  class="rounded safari-only"
                  layout={noCard ? "constrained-width" : "constrained-both"}
                  width={288}
                  alt={alt ?? title}
                  loading="lazy"
                  decoding="async"
                />
              </Fragment>
            ) : (
              <Image
                src={image}
                class="rounded"
                layout={noCard ? "constrained-width" : "constrained-both"}
                width={288}
                alt={alt ?? title}
                loading="lazy"
                decoding="async"
              />
            ))}
          </div>
        </div>
      </a>
    )
  }
  <div class="mt-4 w-72">
    <header>
      {supertitle && (
        <div class="mb-1 hover:text-[--aw-color-accent]">
          <span class="text-sm" set:html={supertitle} />
        </div>
      )}
           
      <h2 class:list={["text-xl sm:text-3xl leading-tight mb-1 dark:text-slate-300 font-heading", classes.title]}>
        {link ? (
          <a href={link}>
            <Markdown.Inline of={title} />
          </a>
        ) : (
          <Markdown.Inline of={title} />
        )}
      </h2>
    </header>

    {
      link ? (
        <a href={link}>
          {text && (
            <p class:list={["flex-grow dark:text-slate-400 format-subtitle-markdown", classes.text]}>
              <Markdown.Inline of={text} />
            </p>
          )}
          
          {textblock && (
            <div set:html={textblock} />
          )}
        </a>
      ) : text
    }

    {footer && (
      <div class="mt-2">
        <span set:html={footer} />
      </div> 
    )}
  </div>
</article>
</a>
