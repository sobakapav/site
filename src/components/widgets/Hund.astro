---
import Image from '~/components/common/Image.astro';
import type { CallToAction } from '~/types';
import Button from '~/components/ui/Button.astro';

export interface Props {
  supertitle?: string;
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any; // TODO: find HTMLElementProps
  imageName?: string;
}

const {
  supertitle = await Astro.slots.render('supertitle'),
  title = await Astro.slots.render('title'),
  hyphenateTitle,
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  imageName,
} = Astro.props;
---

<section class="relative not-prose">
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="relative w-full flex flex-col lg:flex-row lg:gap-2">
    <div class="lg:basis-1/2 bg-[#F0F0F0]  py-0 lg:flex justify-end overflow-y-hidden lg:gap-8">
      <div class="max-w-[636px] text-left mx-auto md:mx-0 pl-4 sm:pl-6 pr-4 md:pr-12 pt-6 md:pt-14 text-sm mb-4">
        {
          supertitle && (
            <div class="text-sm mb-4"
              set:html={supertitle}
            />
          )
        }
        {
          title && (
            <h1
              class:list={[
                'text-5xl md:text-[108px] leading-tighter md:leading-[94px] mb-6 lg:mb-12 font-heading dark:text-gray-200',
                hyphenateTitle && 'hyphens-auto'
              ]}
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto md:mx-0 lg:mx-auto lg:max-w-none">
          {subtitle && <div class="text-lg leading-[26px] mb-6 dark:text-slate-300 format-subtitle-markdown" set:html={subtitle} />}

          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
    <div class="basis-1/2 bg-[#323232]">
      <div class="max-w-[636px]">
        {
          image && (
            <div class="relative m-auto max-w-5xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto md:mx-0 lg:mx-auto rounded-md w-full"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={600}
                  {...image}
                />
              )}
            </div>
          )
        }
        <p
          class="max-w-3xl mx-auto md:mx-0 lg:mx-auto mt-4 mb-8 text-sm md:text-sm text-muted dark:text-slate-400 text-justify"
        >
          {imageName || ''}
        </p>
      </div>
    </div>
  </div>
</section>
