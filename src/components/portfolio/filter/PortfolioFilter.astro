---

import './PortfolioFilter.less';

import Checkbox from '~/components/common/Checkbox.astro';
import RedCheckbox from '~/components/common/RedCheckbox.astro';
import { Icon } from 'astro-icon/components';

import { portfolioFilters } from '~/navigation';

const filters = [];
var i = 1;

for (var group in portfolioFilters) {
  const filterGroup = {
    index: i,
    group,
    items: [],
  };
  for (var key in portfolioFilters[group]) {
    filterGroup.items.push({key, text: portfolioFilters[group][key]});
  }
  filters.push(filterGroup);
  i++;
}

---
<portfolio-filter-block class="filter-tabs">
  <div class="flex flex-row gap-3">
    <span class="text-xl sm:text-3xl leading-tight mb-2 text-[--aw-color-hund] font-heading">Фильтр: </span>
    {filters.map((filter, idx) => (
      <Checkbox 
        id={'show-group-' + idx} 
        label={filter.group} 
        classLabel="text-xl sm:text-3xl leading-tight mb-4 dark:text-slate-300 font-heading px-2 bg-transparent" 
        checked={idx == 0}
      >
        <active-filter-mark class="text-[--aw-color-hund] ml-2">
          *
        </active-filter-mark>
      </Checkbox>
    ))}
    <span class="reset-filters cursor-pointer mb-6"><Icon name="tabler:x" class="w-6 h-6" /></span>
  </div>
  <portfolio-filter class="all-filters relative flex flex-col gap-4 mb-10">
    {filters.map((filter, idx) => (
      <div class:list={["filter-group basis-0 grow flex flex-wrap gap-2", 'filter-group-' + idx]}>
        <h3 class="text-xl sm:text-3xl leading-tight mb-2 dark:text-slate-300 font-heading">{filter.group}:</h3>
        {filter.items.map(item => (
          <Checkbox id={'fltr-' + item.key} label={item.text} classLabel="px-2 py-1" className={'group-' + idx}>
            <subfilter-count class="subfilter-count text-default hover:text-default inline-block w-6 p-1 ml-2 bg-white rounded text-sm text-right" id={'fltr-' + item.key + '-count'} number-target="0">0</subfilter-count>
          </Checkbox>
        ))}
      </div>
    ))}
    
    <script>
      var spinningNumbersInterval;
      var spinningElements = {};
    
      function showAll() {
        for (const card of document.querySelectorAll('.portfolio-collection li')) {
          card.classList.remove('hidden');
        }
      }
      
      function resetFilters() {
        const checkedBoxes = document.querySelectorAll('portfolio-filter input:checked');
        for (const checkbox of checkedBoxes) {
          checkbox.checked = false;
        }
        
        if (window.location.hash) {
          var hashless = window.location.href.substring(0, window.location.href.indexOf('#'));
          window.history.pushState(null, null, hashless);
        }
        
        showAll();
      }
      
      function filter(filters, allFilters) {
        var cards = document.querySelectorAll('.portfolio-collection li');
        const allCards = cards;
        const allFilterCounts = {};
        for (const card of cards) {
          var accepted = true;
          for (var filter of filters) {
            var thisAccepted = !filter.length;
            for (var oneClass of filter) {
              if (card.classList.contains(oneClass)) {
                thisAccepted = true;
              }
            }
            accepted &= thisAccepted;
          }
          if (accepted) {
            card.classList.remove('hidden');
            
            for (var i = 0; i < filters.length; i++) {
              if (!filters[i].length) {
                for (var filter of allFilters[i]) {
                  allFilterCounts[filter] = (allFilterCounts[filter] || 0);
                  if (card.classList.contains(filter)) {
                    allFilterCounts[filter] ++; 
                  }
                }
              }
            }
          } else {
            card.classList.add('hidden');
          }        
        }
        
        var counting = false;
        
        for (var filter in allFilterCounts) {
          var counter = document.getElementById(filter + '-count');
          var realCounter = parseInt(counter.innerHTML);
          if (realCounter !== allFilterCounts[filter]) {
            counting = true;
            counter.classList.add('number-rolling');
            var numberTarget = counter.attributes.getNamedItem('number-target');
            numberTarget.value = '' + allFilterCounts[filter];
            counter.attributes.setNamedItem(numberTarget);
            spinningElements[filter] = counter;
          }
        }
        
        if (counting) {
          spinningNumbersInterval = window.setInterval(spin, 50);
        }
        
        if (filters && filters.length) {
          location.href = "#" + filters.join(':');
        } else if (window.location.hash) {
          var hashless = window.location.href.substring(0, window.location.href.indexOf('#'));
          window.history.pushState(null, null, hashless);
        }
      }
      
      function spin() {
        var overZero = 0;
        for (const spinnerName in spinningElements) {
          var spinner = spinningElements[spinnerName];
          var realNumber = parseInt(spinner.innerHTML);
          var targetNumber = parseInt(spinner.attributes.getNamedItem('number-target').value);
          var step = Math.abs(targetNumber - realNumber);
          step = (step > 10) ? 2 : 1;
          var delta = Math.sign(targetNumber - realNumber) * step;
          realNumber += delta;
          spinner.innerHTML = realNumber;
          if (delta == 0) {
            spinner.classList.remove('number-rolling');
            delete spinningElements[spinnerName]; 
          } else {
            overZero++;
          }
        }
        
        if (overZero == 0) {
          window.clearInterval(spinningNumbersInterval);
        }
      }
      
      function applyFilter() {
        var checkedBoxes = document.querySelectorAll('portfolio-filter input:checked');
        if (checkedBoxes.length == 0) {
          showAll();
        }
        const filterGroups = document.querySelectorAll('portfolio-filter .filter-group');
        const applyFilters = [];
        const allFilters = [];
        for (const group of filterGroups) {
          const filterNames = [];
          const allFilterNames = [];
          for (const astroCheckbox of group.children) {
            if (astroCheckbox.tagName !== 'ASTRO-CHECKBOX')
              continue;
            const checkbox = astroCheckbox.children[0];
            allFilterNames.push(checkbox.id);
            if (checkbox.checked) {
              filterNames.push(checkbox.id);
            }
          }
          applyFilters.push(filterNames);
          allFilters.push(allFilterNames);
        }
        
        filter(applyFilters, allFilters);
      }
  
      window.addEventListener('load', (event) => {      
        for (const filter of document.querySelectorAll('portfolio-filter input')) {
          filter.addEventListener('change', applyFilter);
        }
        
        for (const reset of document.querySelectorAll('.reset-filters')) {
          reset.addEventListener('click', resetFilters);
        }

        const hash = window.location.hash;
        if (hash) {
          const hashElements = hash.split(':');
          for (var tag of hashElements) {
            document.getElementById('fltr-'+tag)?.checked = true;
          } 
        }
        
        applyFilter();
        
      });  
    </script>
  </portfolio-filter>
</portfolio-filter-block>
