---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';
import { Markdown } from '@astropub/md';
import SideSlider from '~/components/common/SideSlider.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 z-[3] ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2 grid-cols-1'
            : columns === 3
              ? 'lg:grid-cols-3 md:grid-cols-2 grid-cols-1'
              : columns === 2
                ? 'sm:grid-cols-2 grid-cols-1'
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, details, icon, callToAction, classes: itemClasses = {} }) => (
        <SideSlider buttonClasses={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
          <Fragment slot="button">
            <div class="flex justify-center">
              {(icon || defaultIcon) && (
                <Icon
                  name={icon || defaultIcon}
                  class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon)}
                />
              )}
            </div>
            <div class="mt-0">
              {title && (
                <h3 class={twMerge('text-xl', titleClass, itemClasses?.title)}>
                  <Markdown.Inline of={title} />
                </h3>
              )}
              {description && (
                <div class={twMerge(`${title ? 'mt-3' : ''} format-subtitle-markdown marked-list`, descriptionClass, itemClasses?.description)}>
                  <Markdown.Inline of={description} />
                </div>
              )}
              {callToAction && (
                <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </Fragment>
          {details && (
            <Fragment slot="content">
              <Markdown.Inline of={details} />
            </Fragment>
          )}
        </SideSlider>
      ))}
    </div>
  )
}
