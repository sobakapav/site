---
import type { ItemGrid as Props } from "~/types";
import { Icon } from "astro-icon/components";
import { twMerge } from "tailwind-merge";
import Button from "./Button.astro";
import { Markdown } from '@astropub/md';

const {
  items = [],
  columns,
  defaultIcon = "",
  classes = {},
} = Astro.props;

const {
  container: containerClass = "",
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
  icon: defaultIconClass = "text-primary",
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 5
            ? "lg:grid-cols-5 md:grid-cols-3 sm:grid-cols-2"
            : columns === 4
            ? "lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2"
            : columns === 3
            ? "lg:grid-cols-3 sm:grid-cols-2"
            : columns === 2
            ? "sm:grid-cols-2 "
            : ""
        }`,
        containerClass
      )}
    >
      {items.map(
        ({
          title,
          subtitle,
          description,
          icon,
          callToAction,
          classes: itemClasses = {},
        }, idx) => (
          <div class={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center text-[#9F9F9F] text-[84px] leading-none mt-[-10px] mr-6">
              {(idx + 1)}
            </div>
            <div class="mt-0">
              {title && <h3 class={twMerge('text-xl', titleClass, itemClasses?.title)}><Markdown.Inline of={title} /></h3>}
              {subtitle && <h4 class={twMerge('text-base text-[#048E86]', titleClass, itemClasses?.subtitle)}><Markdown.Inline of={subtitle} /></h4>}
              {description && (
                <div
                  class={twMerge(`${title ? 'mt-3' : ''} format-subtitle-markdown marked-list`, descriptionClass, itemClasses?.description)}
                >
                  <Markdown.Inline of={description} />
                </div>
              )}
              {callToAction && (
                <div
                  class={twMerge(
                    `${title || description ? 'mt-3' : ''}`,
                    actionClass,
                    itemClasses?.actionClass
                  )}
                >
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
        </div>
        )
      )}
    </div>
  )
}
