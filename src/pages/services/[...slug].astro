---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import { getCollection } from 'astro:content';
import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import { Markdown } from '@astropub/md';

import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import Image from '~/components/common/Image.astro';
import PostTags from '~/components/blog/Tags.astro';
import RelatedLinks from '~/components/blog/RelatedLinks.astro';

import Hund from '~/components/widgets/Hund.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';
import RelatedPosts from '~/components/blog/RelatedPosts.astro';
import Bread from '~/components/widgets/Bread.astro';

export const prerender = true;

export async function getStaticPaths() {
  const services = await getCollection('services');
  return services.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry } = Astro.props;
const post = entry.data;
const { Content } = await entry.render();

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.description || post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] } : {}),
    },
  },
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <Bread
    title={post.title}
    parent="/services"
    parentTitle="Услуги"
  />
    
    <section class="py-0 mx-auto grow-0 shrink-0">
      <article>
      
        <Hund
          title={post.title}
          image={{
            src: post.image,
            alt: post.imageAlt || '',
          }}
          imageName={post.imageName}
        >
          
          <Fragment slot="subtitle">
            <Markdown.Inline of={post.excerpt} />
          </Fragment>
          
        </Hund>
    
        <div class="flex flex-col lg:flex-row justify-between max-w-7xl mx-auto md:mx-0 lg:mx-auto">
          <div class="grow-0 shrink-0 max-w-5xl">
            <div
              class="format-markdown mx-auto md:mx-0 lg:mx-auto px-6 sm:px-6 max-w-3xl prose prose-md lg:prose-xl dark:prose-invert dark:prose-headings:text-slate-300 prose-headings:font-heading prose-headings:leading-tighter prose-img:rounded-md prose-img:shadow-lg mt-8 prose-headings:scroll-mt-[80px] prose-li:my-0"
            >
                <Content/>
            </div>
          </div>
          <div class="lg:max-w-[320px]">
            <div class="format-subtitle-markdown prose prose-md lg:prose-xl dark:prose-invert dark:prose-headings:text-slate-300 prose-headings:font-heading prose-headings:leading-tighter prose-img:rounded-md prose-img:shadow-lg mt-8 prose-headings:scroll-mt-[80px] prose-li:my-0 max-w-2xl xl:max-w-7xl mx-auto px-6 mb-16" >
                <Markdown.Inline of={post.seeMore} />
            </div>
            <RelatedLinks post={post} />
          </div>
        </div>
      </article>
    </section>
  
  
  <RelatedPosts post={post} />
</Layout>
