---
import merge from 'lodash.merge';

import { getCollection } from 'astro:content';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/portfolio/SinglePost.astro';
import Bread from '~/components/widgets/Bread.astro';

import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { getCanonical, getPermalink } from '~/utils/permalinks';
import { findImage } from '~/utils/images';

export async function getStaticPaths() {
  const portfolio = await getCollection('portfolio');
  return portfolio.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const url = getCanonical(getPermalink(entry.permalink, 'portfolio'));
const image = (await findImage(entry.data.image)) as ImageMetadata | string | undefined;

/* Uncomment if needed by routing system
if (entry.data.external) {
  Astro.response.status = 404;
  Astro.response.statusText = "Not found";
}
*/

const metadata = merge(
  {
    title: entry.data.metadata?.title,
    description: entry.data.metadata?.description,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...entry.data.metadata?.openGraph,
    },
  },
  { ...(entry?.metadata ? { ...entry.metadata, canonical: entry.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <Bread
    title={entry.data.title}
    parent="/portfolio"
    parentTitle="Портфолио"
  />
    
  <SinglePost post={{ ...entry.data, image: image }} url={url}>
    <Content />
  </SinglePost>
  
  
</Layout>
